{"ast":null,"code":"var _jsxFileName = \"/Users/denis/Desktop/projects/movies-app/client/src/components/movies/MoviesList.jsx\";\nimport React, { Component } from \"react\";\nimport Movie from \"./Movie\";\nimport { wait, generateArrays, getMovieSize, generateList } from \"../../functions/functions\";\nimport MoviePopup from \"./parts/movie-preview/MoviePopup\";\nimport { apiGetRequest } from \"../../api/api\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport Navbar from \"../navbar/Navbar\";\nimport SmallLoader from \"../parts/SmallLoader\";\nimport ScrollIntoView from 'react-scroll-into-view';\n\nclass MoviesList extends Component {\n  constructor() {\n    super();\n\n    this.updateSize = async () => {\n      const _this$state = this.state,\n            movies = _this$state.movies,\n            pending_movies = _this$state.pending_movies,\n            size = _this$state.size;\n      const width = window.innerWidth;\n      const obj = await getMovieSize(movies, pending_movies, width, size);\n\n      if (obj.movies) {\n        this.setState({\n          movies: obj.movies,\n          pending_movies: obj.pending,\n          size: obj.size\n        });\n      }\n    };\n\n    this.handleMovieSelect = (row_id, movie) => {\n      this.setState({\n        selected: row_id,\n        selected_movie: movie.id\n      });\n      this.setState({\n        show_popup: true\n      });\n      this.scrollToElement();\n    };\n\n    this.updateState = (name, value) => {\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.scrollToElement = async () => {// wait(600).then(() => {\n      //   var element = document.querySelector(\"#selected__row__offset\");\n      //   if (element) {\n      //     element.scrollIntoView({\n      //       behavior: \"smooth\",\n      //       // block: \"nearest\",\n      //       // inline: \"start\",\n      //     });\n      //   }\n      // });\n    };\n\n    this.selectCategory = category => {\n      this.setState({\n        api: category.api,\n        page: 1,\n        movies: [],\n        pending_movies: [],\n        selected_movie: '',\n        show_popup: false,\n        selected: ''\n      }, () => {\n        this.loadElements();\n      });\n    };\n\n    this.closePreview = () => {\n      this.setState({\n        selected: \"\",\n        selected_movie: \"\",\n        show_popup: \"\"\n      });\n    };\n\n    this.loadElements = async () => {\n      const _this$state2 = this.state,\n            size = _this$state2.size,\n            page = _this$state2.page,\n            api = _this$state2.api;\n\n      try {\n        await apiGetRequest(api, page).then(async res => {\n          this.handleMovies(res.results, size);\n          this.setState({\n            page: page + 1\n          });\n        });\n      } catch (error) {}\n    };\n\n    this.handleMovies = (list, size) => {\n      const _this$state3 = this.state,\n            movies = _this$state3.movies,\n            pending_movies = _this$state3.pending_movies,\n            page = _this$state3.page;\n      const obj = generateArrays(list, pending_movies, size);\n      this.setState({\n        movies: [...movies, ...obj.movies],\n        pending_movies: obj.pending\n      });\n    };\n\n    this.state = {\n      movies: [],\n      page: 1,\n      size: 6,\n      page_limit: 6,\n      pending_movies: [],\n      hasMore: true,\n      page_loaded: true,\n      api: 'movie/popular'\n    };\n  }\n\n  async componentWillMount() {\n    window.scrollTo(0, 0);\n    window.addEventListener(\"resize\", this.updateSize);\n    await this.updateSize();\n    this.loadElements();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateSize);\n  }\n\n  render() {\n    const _this$state4 = this.state,\n          selected = _this$state4.selected,\n          selected_movie = _this$state4.selected_movie,\n          show_popup = _this$state4.show_popup,\n          movies = _this$state4.movies,\n          page = _this$state4.page,\n          page_limit = _this$state4.page_limit,\n          size = _this$state4.size;\n    return React.createElement(\"section\", {\n      className: \"movies__list flex__start\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      selectCategory: this.selectCategory,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), React.createElement(InfiniteScroll, {\n      dataLength: generateList(movies).length,\n      next: this.loadElements,\n      hasMore: page < page_limit,\n      loader: React.createElement(SmallLoader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, movies && movies.length > 0 ? movies.map((list, i) => {\n      return React.createElement(ScrollIntoView, {\n        selector: \"#selected__row__offset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        key: i,\n        id: selected === i ? \"selected__row\" : \"\",\n        className: \"movies__list__flex flex__column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, selected === i ? React.createElement(\"aside\", {\n        id: \"selected__row__offset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }) : \"\", React.createElement(\"ul\", {\n        className: \"flex__start\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, list.map(m => {\n        return React.createElement(Movie, {\n          mobile: size === 2,\n          key: m.id,\n          selected: selected === i,\n          handleMovieSelect: () => this.handleMovieSelect(i, m),\n          selected_movie: selected_movie === m.id,\n          movie: m,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164\n          },\n          __self: this\n        });\n      })), selected === i && selected_movie && show_popup ? React.createElement(MoviePopup, {\n        size: size,\n        mobile: size === 2,\n        selected_movie: selected_movie,\n        closePreview: this.closePreview,\n        updateParent: this.updateState,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }) : \"\"));\n    }) : React.createElement(\"div\", {\n      className: \"movies__first__loading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(SmallLoader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default MoviesList;","map":{"version":3,"sources":["/Users/denis/Desktop/projects/movies-app/client/src/components/movies/MoviesList.jsx"],"names":["React","Component","Movie","wait","generateArrays","getMovieSize","generateList","MoviePopup","apiGetRequest","InfiniteScroll","Navbar","SmallLoader","ScrollIntoView","MoviesList","constructor","updateSize","state","movies","pending_movies","size","width","window","innerWidth","obj","setState","pending","handleMovieSelect","row_id","movie","selected","selected_movie","id","show_popup","scrollToElement","updateState","name","value","selectCategory","category","api","page","loadElements","closePreview","then","res","handleMovies","results","error","list","page_limit","hasMore","page_loaded","componentWillMount","scrollTo","addEventListener","componentWillUnmount","removeEventListener","render","length","map","i","m"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,YAA/B,EAA6CC,YAA7C,QAAiE,2BAAjE;AACA,OAAOC,UAAP,MAAuB,kCAAvB;AACA,SAASC,aAAT,QAA8B,eAA9B;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,cAAP,MAA2B,wBAA3B;;AAIA,MAAMC,UAAN,SAAyBZ,SAAzB,CAAmC;AACjCa,EAAAA,WAAW,GAAG;AACZ;;AADY,SAyBdC,UAzBc,GAyBD,YAAY;AAAA,0BACkB,KAAKC,KADvB;AAAA,YACfC,MADe,eACfA,MADe;AAAA,YACPC,cADO,eACPA,cADO;AAAA,YACSC,IADT,eACSA,IADT;AAEvB,YAAMC,KAAK,GAAGC,MAAM,CAACC,UAArB;AAEA,YAAMC,GAAG,GAAG,MAAMlB,YAAY,CAACY,MAAD,EAASC,cAAT,EAAyBE,KAAzB,EAAgCD,IAAhC,CAA9B;;AACA,UAAII,GAAG,CAACN,MAAR,EAAgB;AACd,aAAKO,QAAL,CAAc;AACZP,UAAAA,MAAM,EAAEM,GAAG,CAACN,MADA;AAEZC,UAAAA,cAAc,EAAEK,GAAG,CAACE,OAFR;AAGZN,UAAAA,IAAI,EAAEI,GAAG,CAACJ;AAHE,SAAd;AAKD;AACF,KArCa;;AAAA,SAuCdO,iBAvCc,GAuCM,CAACC,MAAD,EAASC,KAAT,KAAmB;AACrC,WAAKJ,QAAL,CAAc;AACZK,QAAAA,QAAQ,EAAEF,MADE;AAEZG,QAAAA,cAAc,EAAEF,KAAK,CAACG;AAFV,OAAd;AAIA,WAAKP,QAAL,CAAc;AACZQ,QAAAA,UAAU,EAAE;AADA,OAAd;AAGA,WAAKC,eAAL;AACD,KAhDa;;AAAA,SAkDdC,WAlDc,GAkDA,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC7B,WAAKZ,QAAL,CAAc;AACZ,SAACW,IAAD,GAAQC;AADI,OAAd;AAGD,KAtDa;;AAAA,SAwDdH,eAxDc,GAwDI,YAAY,CAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KAnEa;;AAAA,SAoEdI,cApEc,GAoEIC,QAAD,IAAc;AAC7B,WAAKd,QAAL,CAAc;AACZe,QAAAA,GAAG,EAACD,QAAQ,CAACC,GADD;AAEZC,QAAAA,IAAI,EAAC,CAFO;AAGZvB,QAAAA,MAAM,EAAC,EAHK;AAIZC,QAAAA,cAAc,EAAC,EAJH;AAKZY,QAAAA,cAAc,EAAC,EALH;AAMZE,QAAAA,UAAU,EAAC,KANC;AAOZH,QAAAA,QAAQ,EAAC;AAPG,OAAd,EAQG,MAAM;AACP,aAAKY,YAAL;AACD,OAVD;AAWH,KAhFe;;AAAA,SAiFdC,YAjFc,GAiFC,MAAM;AACnB,WAAKlB,QAAL,CAAc;AACZK,QAAAA,QAAQ,EAAE,EADE;AAEZC,QAAAA,cAAc,EAAE,EAFJ;AAGZE,QAAAA,UAAU,EAAE;AAHA,OAAd;AAKD,KAvFa;;AAAA,SAwFdS,YAxFc,GAwFC,YAAY;AAAA,2BACG,KAAKzB,KADR;AAAA,YACjBG,IADiB,gBACjBA,IADiB;AAAA,YACXqB,IADW,gBACXA,IADW;AAAA,YACLD,GADK,gBACLA,GADK;;AAGzB,UAAI;AACF,cAAM/B,aAAa,CAAC+B,GAAD,EAAMC,IAAN,CAAb,CAAyBG,IAAzB,CAA8B,MAAOC,GAAP,IAAe;AACjD,eAAKC,YAAL,CAAkBD,GAAG,CAACE,OAAtB,EAA+B3B,IAA/B;AACA,eAAKK,QAAL,CAAc;AACZgB,YAAAA,IAAI,EAACA,IAAI,GAAG;AADA,WAAd;AAGD,SALK,CAAN;AAMD,OAPD,CAOE,OAAOO,KAAP,EAAc,CAAE;AACnB,KAnGa;;AAAA,SAsGdF,YAtGc,GAsGC,CAACG,IAAD,EAAO7B,IAAP,KAAgB;AAAA,2BACY,KAAKH,KADjB;AAAA,YACrBC,MADqB,gBACrBA,MADqB;AAAA,YACbC,cADa,gBACbA,cADa;AAAA,YACGsB,IADH,gBACGA,IADH;AAE7B,YAAMjB,GAAG,GAAGnB,cAAc,CAAC4C,IAAD,EAAO9B,cAAP,EAAuBC,IAAvB,CAA1B;AACA,WAAKK,QAAL,CAAc;AACZP,QAAAA,MAAM,EAAE,CAAC,GAAGA,MAAJ,EAAY,GAAGM,GAAG,CAACN,MAAnB,CADI;AAEZC,QAAAA,cAAc,EAAEK,GAAG,CAACE;AAFR,OAAd;AAKD,KA9Ga;;AAEZ,SAAKT,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,EADG;AAEXuB,MAAAA,IAAI,EAAE,CAFK;AAGXrB,MAAAA,IAAI,EAAE,CAHK;AAIX8B,MAAAA,UAAU,EAAC,CAJA;AAKX/B,MAAAA,cAAc,EAAE,EALL;AAMXgC,MAAAA,OAAO,EAAE,IANE;AAOXC,MAAAA,WAAW,EAAC,IAPD;AAQXZ,MAAAA,GAAG,EAAC;AARO,KAAb;AAUD;;AACD,QAAMa,kBAAN,GAA2B;AAEzB/B,IAAAA,MAAM,CAACgC,QAAP,CAAgB,CAAhB,EAAkB,CAAlB;AACAhC,IAAAA,MAAM,CAACiC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKvC,UAAvC;AAEA,UAAM,KAAKA,UAAL,EAAN;AACA,SAAK0B,YAAL;AAED;;AACDc,EAAAA,oBAAoB,GAAG;AACrBlC,IAAAA,MAAM,CAACmC,mBAAP,CAA2B,QAA3B,EAAqC,KAAKzC,UAA1C;AACD;;AAwFD0C,EAAAA,MAAM,GAAG;AAAA,yBASH,KAAKzC,KATF;AAAA,UAELa,QAFK,gBAELA,QAFK;AAAA,UAGLC,cAHK,gBAGLA,cAHK;AAAA,UAILE,UAJK,gBAILA,UAJK;AAAA,UAKLf,MALK,gBAKLA,MALK;AAAA,UAMLuB,IANK,gBAMLA,IANK;AAAA,UAOLS,UAPK,gBAOLA,UAPK;AAAA,UAQL9B,IARK,gBAQLA,IARK;AAUP,WACE;AAAS,MAAA,SAAS,EAAC,0BAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,MAAD;AACA,MAAA,cAAc,EAAI,KAAKkB,cADvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,EAIE,oBAAC,cAAD;AACE,MAAA,UAAU,EAAE/B,YAAY,CAACW,MAAD,CAAZ,CAAqByC,MADnC;AAEE,MAAA,IAAI,EAAE,KAAKjB,YAFb;AAGE,MAAA,OAAO,EAAED,IAAI,GAAGS,UAHlB;AAIE,MAAA,MAAM,EAAE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMGhC,MAAM,IAAIA,MAAM,CAACyC,MAAP,GAAgB,CAA1B,GACGzC,MAAM,CAAC0C,GAAP,CAAW,CAACX,IAAD,EAAOY,CAAP,KAAa;AACtB,aACE,oBAAC,cAAD;AAAiB,QAAA,QAAQ,EAAC,wBAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AACE,QAAA,GAAG,EAAEA,CADP;AAEE,QAAA,EAAE,EAAE/B,QAAQ,KAAK+B,CAAb,GAAiB,eAAjB,GAAmC,EAFzC;AAGE,QAAA,SAAS,EAAC,iCAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKG/B,QAAQ,KAAK+B,CAAb,GACC;AAAO,QAAA,EAAE,EAAC,uBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,GAGC,EARJ,EAUE;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGZ,IAAI,CAACW,GAAL,CAAUE,CAAD,IAAO;AACf,eACE,oBAAC,KAAD;AACA,UAAA,MAAM,EAAI1C,IAAI,KAAK,CADnB;AAEE,UAAA,GAAG,EAAE0C,CAAC,CAAC9B,EAFT;AAGE,UAAA,QAAQ,EAAEF,QAAQ,KAAK+B,CAHzB;AAIE,UAAA,iBAAiB,EAAE,MACjB,KAAKlC,iBAAL,CAAuBkC,CAAvB,EAA0BC,CAA1B,CALJ;AAOE,UAAA,cAAc,EAAE/B,cAAc,KAAK+B,CAAC,CAAC9B,EAPvC;AAQE,UAAA,KAAK,EAAE8B,CART;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,OAbA,CADH,CAVF,EA0BGhC,QAAQ,KAAK+B,CAAb,IAAkB9B,cAAlB,IAAoCE,UAApC,GACC,oBAAC,UAAD;AACA,QAAA,IAAI,EAAIb,IADR;AAEA,QAAA,MAAM,EAAIA,IAAI,KAAK,CAFnB;AAGE,QAAA,cAAc,EAAEW,cAHlB;AAIE,QAAA,YAAY,EAAE,KAAKY,YAJrB;AAKE,QAAA,YAAY,EAAE,KAAKR,WALrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,GASC,EAnCJ,CADA,CADF;AA0CD,KA3CD,CADH,GA6CG;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAwC,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAxC,CAnDN,CAJF,CADF;AA4DD;;AAvLgC;;AA0LnC,eAAerB,UAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Movie from \"./Movie\";\nimport { wait, generateArrays, getMovieSize, generateList } from \"../../functions/functions\";\nimport MoviePopup from \"./parts/movie-preview/MoviePopup\";\nimport { apiGetRequest } from \"../../api/api\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport Navbar from \"../navbar/Navbar\";\nimport SmallLoader from \"../parts/SmallLoader\";\nimport ScrollIntoView from 'react-scroll-into-view'\n\n\n\nclass MoviesList extends Component {\n  constructor() {\n    super();\n    this.state = {\n      movies: [],\n      page: 1,\n      size: 6,\n      page_limit:6,\n      pending_movies: [],\n      hasMore: true,\n      page_loaded:true,\n      api:'movie/popular'\n    };\n  }\n  async componentWillMount() {\n   \n    window.scrollTo(0,0)\n    window.addEventListener(\"resize\", this.updateSize);\n\n    await this.updateSize();\n    this.loadElements()\n \n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateSize);\n  }\n  updateSize = async () => {\n    const { movies, pending_movies, size } = this.state;\n    const width = window.innerWidth;\n\n    const obj = await getMovieSize(movies, pending_movies, width, size);\n    if (obj.movies) {\n      this.setState({\n        movies: obj.movies,\n        pending_movies: obj.pending,\n        size: obj.size,\n      });\n    }\n  };\n\n  handleMovieSelect = (row_id, movie) => {\n    this.setState({\n      selected: row_id,\n      selected_movie: movie.id,\n    });\n    this.setState({\n      show_popup: true,\n    });\n    this.scrollToElement();\n  };\n\n  updateState = (name, value) => {\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  scrollToElement = async () => {\n    // wait(600).then(() => {\n    //   var element = document.querySelector(\"#selected__row__offset\");\n    //   if (element) {\n    //     element.scrollIntoView({\n    //       behavior: \"smooth\",\n    //       // block: \"nearest\",\n    //       // inline: \"start\",\n    //     });\n    //   }\n    // });\n  };\n  selectCategory = (category) => {\n    this.setState({\n      api:category.api,\n      page:1,\n      movies:[],\n      pending_movies:[],\n      selected_movie:'',\n      show_popup:false,\n      selected:''\n    }, () => {\n      this.loadElements()\n    })\n}\n  closePreview = () => {\n    this.setState({\n      selected: \"\",\n      selected_movie: \"\",\n      show_popup: \"\",\n    });\n  };\n  loadElements = async () => {\n    const { size, page, api } = this.state;\n    \n    try {\n      await apiGetRequest(api, page).then(async (res) => {\n        this.handleMovies(res.results, size);\n        this.setState({\n          page:page + 1\n        })\n      });\n    } catch (error) {}\n  };\n\n\n  handleMovies = (list, size) => {\n    const { movies, pending_movies, page } = this.state;\n    const obj = generateArrays(list, pending_movies, size);\n    this.setState({\n      movies: [...movies, ...obj.movies],\n      pending_movies: obj.pending,\n    });\n   \n  };\n\n  render() {\n    const {\n      selected,\n      selected_movie,\n      show_popup,\n      movies,\n      page,\n      page_limit,\n      size\n    } = this.state;\n    return (  \n      <section className=\"movies__list flex__start\">\n       <Navbar \n       selectCategory = {this.selectCategory}\n       />\n        <InfiniteScroll\n          dataLength={generateList(movies).length} \n          next={this.loadElements}\n          hasMore={page < page_limit}\n          loader={<SmallLoader />}\n        >\n          {movies && movies.length > 0\n            ? movies.map((list, i) => {\n                return (\n                  <ScrollIntoView  selector=\"#selected__row__offset\">\n                  <div\n                    key={i}\n                    id={selected === i ? \"selected__row\" : \"\"}\n                    className=\"movies__list__flex flex__column\"\n                  >\n                    {selected === i ? (\n                      <aside id=\"selected__row__offset\"></aside>\n                    ) : (\n                      \"\"\n                    )}\n                    <ul className=\"flex__start\">\n                      {list.map((m) => {\n                        return (\n                          <Movie\n                          mobile = {size === 2}\n                            key={m.id}\n                            selected={selected === i}\n                            handleMovieSelect={() =>\n                              this.handleMovieSelect(i, m)\n                            }\n                            selected_movie={selected_movie === m.id}\n                            movie={m}\n                          />\n                        );\n                      })}\n                    </ul>\n                    {selected === i && selected_movie && show_popup ? (\n                      <MoviePopup\n                      size = {size}\n                      mobile = {size === 2}\n                        selected_movie={selected_movie}\n                        closePreview={this.closePreview}\n                        updateParent={this.updateState}\n                      />\n                    ) : (\n                      \"\"\n                    )}\n                  </div>\n                  </ScrollIntoView>\n                );\n              })\n            : <div className='movies__first__loading'><SmallLoader /></div>}\n        </InfiniteScroll>\n      </section>\n    );\n  }\n}\n\nexport default MoviesList;\n"]},"metadata":{},"sourceType":"module"}