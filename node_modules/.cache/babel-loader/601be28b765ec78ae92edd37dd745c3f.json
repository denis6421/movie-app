{"ast":null,"code":"export const generateList = list => {\n  let arr = [];\n\n  if (list && list.length > 0) {\n    list.forEach(element => {\n      return arr = [...arr, ...element];\n    });\n  }\n\n  return arr;\n};\nexport const generateArrays = (list, pending_movies, size) => {\n  let new_list = [...list, ...pending_movies];\n  let pending = [];\n  var movies = [];\n\n  if (new_list && new_list.length > 0) {\n    for (var i = 0; i < new_list.length; i += size) {\n      let sliced = new_list.slice(i, i + size);\n\n      if (sliced.length === size) {\n        movies.push(sliced);\n      } else {\n        pending.push(...sliced);\n      }\n    }\n  }\n\n  return {\n    movies,\n    pending\n  };\n};\nexport const wait = time => new Promise(res => setTimeout(() => res(), time));\nexport const getMovieSize = (movies, pending_movies, width, size) => {\n  let list = [];\n  let obj = {};\n\n  if (width <= 1500 && size !== 5) {\n    size = 5;\n    list = generateList(movies);\n    obj = generateArrays(list, pending_movies, size);\n    obj.size = size;\n  }\n\n  if (width <= 1200 && size !== 4) {\n    size = 4;\n    list = generateList(movies);\n    obj = generateArrays(list, pending_movies, size);\n    obj.size = size;\n  }\n\n  if (width <= 650 && size !== 2) {\n    size = 2;\n    list = generateList(movies);\n    obj = generateArrays(list, pending_movies, size);\n    obj.size = size;\n  }\n\n  if (width > 1500 && size !== 6) {\n    size = 6;\n    list = generateList(movies);\n    obj = generateArrays(list, pending_movies, size);\n    obj.size = size;\n  }\n\n  return obj;\n};","map":{"version":3,"sources":["/Users/denis/Desktop/projects/movies-app/client/src/functions/functions.js"],"names":["generateList","list","arr","length","forEach","element","generateArrays","pending_movies","size","new_list","pending","movies","i","sliced","slice","push","wait","time","Promise","res","setTimeout","getMovieSize","width","obj"],"mappings":"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","sourcesContent":["export const generateList = (list) => {\n  let arr = [];\n  if(list && list.length > 0){\n    list.forEach((element) => {\n      return (arr = [...arr, ...element]);\n    });\n  }\n\n  return arr;\n};\n\nexport const generateArrays = (list, pending_movies, size) => {\n  let new_list = [...list, ...pending_movies];\n  let pending = [];\n  var movies = [];\n  if(new_list && new_list.length > 0){\n    for (var i = 0; i < new_list.length; i += size) {\n      let sliced = new_list.slice(i, i + size);\n      if (sliced.length === size) {\n        movies.push(sliced);\n      } else {\n        pending.push(...sliced);\n      }\n    }\n  }\n  return {\n    movies,\n    pending,\n  };\n};\n\nexport const wait = (time) =>\n  new Promise((res) => setTimeout(() => res(), time));\n\nexport const getMovieSize = (movies, pending_movies, width, size) => {\n  let list = [];\n  let obj = {};\n\n  if (width <= 1500 && size !== 5) {\n    size = 5;\n    list = generateList(movies);\n    obj = generateArrays(list, pending_movies, size);\n    obj.size = size;\n  \n  }\n\n  if (width <= 1200 && size !== 4) {\n    size = 4;\n    list = generateList(movies);\n    obj = generateArrays(list, pending_movies, size);\n    obj.size = size;\n  \n  }\n\n  if (width <= 650 && size !== 2) {\n    size = 2;\n    list = generateList(movies);\n    obj = generateArrays(list, pending_movies, size);\n    obj.size = size;\n  \n  }\n\n  if (width > 1500 && size !== 6) {\n    size = 6;\n    list = generateList(movies);\n    obj = generateArrays(list, pending_movies, size);\n    obj.size = size;\n  \n  }\n return obj\n};\n"]},"metadata":{},"sourceType":"module"}